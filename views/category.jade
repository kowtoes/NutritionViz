extends layout

block content

    h1.
      Water
    div#main
      form#formFilter(name="form-filter", method="get", action="/category/search")
        div(data-role='fieldcontain')
          fieldset(data-role='controlgroup')
            label(for='Refine Search') Search by Category
               input(id='foodFilter', class = 'ui-widget', type='text',value='',placeholder='query',name='filter')
            div(data-role='fieldcontain')
               input(type='submit',value='filter',data-transition='fade', data-theme='c')
      div#tree

    script(src="http://d3js.org/d3.v3.min.js")
    script(src="/scripts/jquery-2.1.3.js")
    script(src="/scripts/jquery-ui.js")
    script(src="/scripts/jquery.cookie.js")
    script(src="/scripts/jstree.min.js")
    script.
      //get json from jade
      var category = [#{category}];
      var foodNames = [];

      category.sort(function(a, b) {
        if(a.Water == b.Water)
            return 0;
        if(a.Water < b.Water)
            return -1;
        if(a.Water > b.Water)
            return 1;
      });


      //number based categorys from json, besides NDB_No, 27 entries
      var yAxisLabels = ["Water","Kcal", "Protein", "Tot_Fat", "Carbs", "Fiber", "Ash",
      "Calcium", "Phos", "Iron", "Sodium", "Potas", "Magnes", "Zinc", "Copper", "Vit_A", "Vit_E",
      "Thiamin", "Ribofl", "Niacin", "Vit_C", "FA_Sat","FA_Mono","FA_Poly", "Choles", "GmWt_1", "Refuse%"];
      // 28 entries total
      var yvalues = [];
      var y2values = [];
      var yMaxes = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
      var majorGroups = ["Dairy and Egg", "Fruit, Nut and Vegetable", "Processed Foods", "Fats and Oils",
                         "Meat and Fish", "Soups, Sauces, and Gravies", "Starches", "Beverages"]
      var subGroups = ["Dairy and Egg Products", "Spices and Herbs", "Baby Foods", "Fats and Oils",
            "Poultry Products", "Soups, Sauces, and Gravies", "Sausages and Luncheon Meats",
            "Breakfast Cereals", "Fruits and Fruit Juices", "Pork Products", "Vegetables and Vegetable Products",
            "Nut and Seed Products", "Beef Products", "Beverages", "Finfish and Shellfish Products",
            "Legumes and Legume Products", "Lamb, Veal, and Game Products", "Baked Products", "Snacks and Sweets",
            "Cereal Grains and Pasta", "Fast Foods", "Meals, Entrees, and Sidedishes"];

      function contains(a, obj) {
        var i = a.length;
        while (i--) {
           if (a[i] === obj) {
               return true;
           }
        }
        return false;
      }






      //iterate through each nutritional food item
      for (var x = 0; x < category.length; x++) {
        y2values.push(category[x].Water);
      }
      //compute the average of each category
      var topLevelAverages= [54.26628514056221, 226.58155639223563, 11.631261546184765, 11.024045682730897,
      20.937067938420306, 1.8692039825970563, 1.967626338688084, 69.31775585676036,
      157.94124364123158, 2.667693775100392, 378.637108266399, 289.4174963186078,
      36.30392402945113, 2.0046306894243644, 0.19614457831325344, 751.0974263721553,
      0.7662387884872838, 0.20384605087014906, 0.22751221552877962, 3.000475736278444,
      9.363419344042788, 3.5725011713520805, 4.297347556894269, 2.0274335676037465,
      41.80646084337349, 155.8459002677344, 5.924866131191433]
      var averagesRaw = [];
      var cumSums = [];
      for(var y = 1; y < 21; y++) {
        var sum = 0;
        var frac = y * y2values.length / 20;
        for (var x = (y - 1) * y2values.length; x < frac; x++) {
          sum += y2values[x]
        }
        cumSums.push(sum);
      }
      //remove NDB_No from array
      averagesRaw = averagesRaw.slice(1);
      var relativeAveragesFullSet = [];
      for(var y = 0; y < averagesRaw.length; y++) {
        relativeAveragesFullSet.push(parseFloat(Math.round(averagesRaw[y] / topLevelAverages[y] * 100) / 100).toFixed(2));
      }

      if($.cookie('prevData')) {
            var oldSet = [];
            for (var x = 0; x < relativeAveragesFullSet.length; x++) {
                oldSet.push($.cookie('prevData').split(',')[x]);
            }
        }

      $(document).ready(function() {
        $("input#foodFilter").autocomplete({
          source: foodNames
        });





      });

      var margin = {top: 20, right: 20, bottom: 30, left: 70},
      width = 720 - margin.left - margin.right,
      height = 1000 - margin.top - margin.bottom;

      var x = d3.scale.linear()
          .domain([0, 100])
          .range([0, width]);

      var y = d3.scale.ordinal()
          .domain(y2values)
          .rangeRoundBands([0, height], 5);

      var xAxis = d3.svg.axis()
          .scale(x)
          .orient("bottom");

      var yAxis = d3.svg.axis()
          .scale(y)
          .orient("left");



      var svg = d3.select("body").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        svg.append("g")
            .attr("class", "x axis")
            .call(xAxis)
            .data(relativeAveragesFullSet)
            .attr("transform", "translate(0 ," + height + ")");


        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .data(relativeAveragesFullSet);




        var bar = svg.selectAll(".bar")
            .data(relativeAveragesFullSet)
          .enter().append("rect")
            .attr("class", "bar")
            .attr("y", function(d, i) { return i * (height / relativeAveragesFullSet.length); })
            .attr("width", function(d) {return x(d)})
            .attr("height", y.rangeBand())
            .text(function(d) { return d; });
            var text = svg.selectAll(".text")
                .data(relativeAveragesFullSet)
                .enter().append("text")
                    .attr("class", "text")
                    .attr("x", function(d) { return x(d); })
                    .attr("y", function(d, i) { return 16 + i * (height / relativeAveragesFullSet.length); })
                    .attr("dy", ".35em")
                    .text(function(d) { return d; });


        function type(d) {
          d.value = +d.value; // coerce to number
          return d;
        }
